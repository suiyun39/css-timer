html,
body {
  margin: 0;
  height: 100%;
}

.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 15px;
  background-color: #f0f8ff;
}

.timer {
  display: grid;
  gap: 30px 20px;
  grid-template-areas: "clock clock" "btn-start btn-reset";
}

.clock {
  grid-area: clock;
  padding: 0.2em 0.5em;
  color: #ffffff;
  font-size: 60px;
  font-family: monospace;
  text-align: center;
  border: 5px solid rgba(255, 255, 255, 0.3);
  border-radius: 10px;
  background-color: #3a3a3a;
}

.btn {
  padding: 0.5em 0.9em;
  color: #ffffff;
  font-size: 24px;
  text-align: center;
  border-radius: 8px;
  user-select: none;
  cursor: pointer;
  transition: filter 0.2s;

  &:hover {
    filter: brightness(1.2);
  }

  &.btn-start {
    grid-area: btn-start;
    background-color: #1677ff;
  }

  &.btn-reset {
    grid-area: btn-reset;
    background-color: #52c41a;
  }
}

/* 使用自定义属性存储时间 */
@property --minute {
  syntax: "<integer>";
  inherits: false;
  initial-value: 0;
}

@property --second {
  syntax: "<integer>";
  inherits: false;
  initial-value: 0;
}

@property --millisecond {
  syntax: "<integer>";
  inherits: false;
  initial-value: 0;
}

/* 使用差分动画更新时间. 毫秒动画执行频次为 1s * 100, 所以仅需要更新到 99 */
@keyframes update-minute {
  from {
    --minute: 0;
  }

  to {
    --minute: 59;
  }
}

@keyframes update-second {
  from {
    --second: 0;
  }

  to {
    --second: 59;
  }
}

@keyframes update-millisecond {
  from {
    --millisecond: 0;
  }

  to {
    --millisecond: 99;
  }
}

/* 使用伪元素构造初始显示以方便使用 CSS 更新 */
.clock {
  counter-reset: minute var(--minute) second var(--second) millisecond var(--millisecond);
  animation: update-minute 3600s steps(60) infinite, update-second 60s steps(60) infinite, update-millisecond 1s steps(100) infinite;
  animation-play-state: paused;

  &::before {
    content: counter(minute, decimal-leading-zero) ":" counter(second, decimal-leading-zero) "." counter(millisecond, decimal-leading-zero);
    text-shadow: 3px 3px 3px #000000;
  }
}

.btn-start::before {
  content: "开始";
}

/* 利用兄弟选择器向其他元素传导计时器状态 */
#Running:checked {
  & ~ .clock {
    animation-play-state: running;
  }

  & ~ .btn-start::before {
    content: "暂停";
  }

  /* 计时器运行中禁用重置按钮 */

  & ~ .btn-reset {
    pointer-events: none;
    opacity: 0.5;
  }
}

/* 重置按钮激活时清除动画, 实现计时器重置 */
.btn-reset:active {
  & ~ .clock {
    animation: none;
  }
}

.repo-link {
  position: fixed;
  top: 30px;
  right: 30px;

  img {
    width: 60px;
    height: 60px;
  }
}
